- hosts: "{{ host }}"
  tasks:
    - name: Run fio benchmark
      block:
      - name: Create test directory
        file:
          path: "{{ fio_dir }}/fio_in_progress"
          state: directory
          mode: '0777'

      - name: Create temporary build directory
        tempfile:
          state: directory
          suffix: .fio.build
        register: tempdir

      - name: Copy Dockerfile
        ansible.posix.synchronize:
          src: tool-fio/
          dest: "{{ tempdir.path }}"
          recursive: yes

      - name: Build latest fio image
        become: yes
        community.docker.docker_image:
          build:
            path: "{{ tempdir.path }}"
          name: galaxybenchmarker/tool-fio
          tag: latest
          force_source: yes
          force_tag: yes
          source: build

      - name: Prepare read benchmark
        when: fio_mode in ["read", "randread"]
        block:
        - name: Prepare in /tmp and move to destination
          when: fio_prepare_read_benchmark_in_tmp|bool
          block:
          - name: Run fio container (create files)
            become: yes
            community.docker.docker_container:
              name: fio
              image: galaxybenchmarker/tool-fio
              detach: false
              cleanup: true
              volumes:
                - "{{ tempdir.path }}:/results:rw"
                - "/tmp/fio_in_progress:/mnt/volume_under_test:rw"
              working_dir: /mnt/volume_under_test
              command: [
                "--bs={{ fio_blocksize }}",
                "--direct=1",
                "--end_fsync=1",
                "--filename=testfile.fio",
                "--group_reporting",
                "--iodepth={{ fio_iodepth }}",
                "--ioengine=libaio",
                "--name={{ fio_jobname }}",
                "--numjobs={{ fio_numjobs }}",
                "--output", "/results/{{ fio_result_file }}",
                "--output-format=json",
                "{% if fio_refill_buffers|bool %}--refill_buffers{% endif %}",
                "{% if fio_time_based|bool %}--runtime={{ fio_runtime_in_s }}{% endif %}",
                "--rw={{ fio_mode }}",
                "--size={{ fio_filesize }}",
                "{% if fio_time_based|bool %}--time_based{% endif %}",
                "--create_only=1",
              ]
            register: fio_results
            ignore_errors: yes

          - name: debug
            debug: var=fio_results

          - name: Move testfile to {{ fio_dir }}/fio_in_progress
            become: yes
            command: mv /tmp/fio_in_progress/testfile.fio {{ fio_dir }}/fio_in_progress

          - name: Change owner of testfile
            become: yes
            command: chown 1000:1000 {{ fio_dir }}/fio_in_progress/testfile.fio

        - name: Prepare in destination
          when: not fio_prepare_read_benchmark_in_tmp|bool
          block:
          - name: Run fio container (create files)
            become: yes
            community.docker.docker_container:
              name: fio
              image: galaxybenchmarker/tool-fio
              detach: false
              cleanup: true
              volumes:
                - "{{ tempdir.path }}:/results:rw"
                - "{{ fio_dir }}/fio_in_progress:/mnt/volume_under_test:rw"
              working_dir: /mnt/volume_under_test
              command: [
                "--bs={{ fio_blocksize }}",
                "--direct=1",
                "--end_fsync=1",
                "--filename=testfile.fio",
                "--group_reporting",
                "--iodepth={{ fio_iodepth }}",
                "--ioengine=libaio",
                "--name={{ fio_jobname }}",
                "--numjobs={{ fio_numjobs }}",
                "--output", "/results/{{ fio_result_file }}",
                "--output-format=json",
                "{% if fio_refill_buffers|bool %}--refill_buffers{% endif %}",
                "{% if fio_time_based|bool %}--runtime={{ fio_runtime_in_s }}{% endif %}",
                "--rw={{ fio_mode }}",
                "--size={{ fio_filesize }}",
                "{% if fio_time_based|bool %}--time_based{% endif %}",
                "--create_only=1",
              ]
            register: fio_results
            ignore_errors: yes

          - name: debug
            debug: var=fio_results

        # Stat breaks with OSError
        # - name: Check if file exists
        #   stat: path={{ fio_dir }}/fio_in_progress/testfile.fio
        #   when: fio_mode in ["read", "randread"]
        #   register: stat_result
        - name: Check if file exists (1)
          shell: ls -la {{ fio_dir }}/fio_in_progress/testfile.fio
          register: ls_result

        - name: Wait for file
          when: not ("ubuntu ubuntu {{ fio_filesize_in_bytes }}" in ls_result.stdout)
          block:
          - name: Pause for 10 seconds to wait for file
            pause:
              seconds: 10

          - name: Check if file exists (2)
            shell: ls -la {{ fio_dir }}/fio_in_progress/testfile.fio
            register: ls_result2

          - name: Wait for file looonger
            when: not ("ubuntu ubuntu {{ fio_filesize_in_bytes }}" in ls_result2.stdout)
            block:

            - name: Pause for 1 minute to wait for file
              pause:
                minutes: 1

            - name: Check if file exists (3)
              shell: ls -la {{ fio_dir }}/fio_in_progress/testfile.fio
              register: ls_result3

            - name: Wait for file loooooonger
              when: not ("ubuntu ubuntu {{ fio_filesize_in_bytes }}" in ls_result3.stdout)
              block:

              - name: Pause for 1 more minute to wait for file
                pause:
                  minutes: 1

              - name: Check if file exists (4)
                shell: ls -la {{ fio_dir }}/fio_in_progress/testfile.fio
                register: ls_result4
                failed_when: not ("ubuntu ubuntu {{ fio_filesize_in_bytes }}" in ls_result4.stdout)

      - include_tasks: tasks/run_fio_and_check_result.yml

      - name: Collect result
        ansible.builtin.fetch:
          src: "{{ tempdir.path }}/{{ fio_result_file }}"
          dest: "{{ controller_dir }}/{{ fio_result_file }}"
          flat: yes

      always:
        - name: Cleanup
          file:
            path: "{{ item }}"
            state: absent
          loop:
            - "{{ fio_dir }}/fio_in_progress"
            - "{{ tempdir.path }}"
          retries: 15
          delay: 5
          register: cleanup
          until: not cleanup["failed"]
