# You need have access to a GalaxyInstance with admin-rights
galaxy:
  url: "http://galaxy.example.com"
  admin_key: "blablabla"
  # Check, if tools need to be installed when running GalaxyWorkflow (can be turned off after first benchmark-run)
  shed_install: true
  # Used to deploy DynamicDestinations via Ansible
  ssh_user: ubuntu
  ssh_key: /local/path/to/ssh/key.cert
  galaxy_root_path: /srv/galaxy
  galaxy_config_dir: /srv/galaxy/server/config
  galaxy_user: galaxy

# Used for analyzing results
influxdb:
  host: influxdb.example.com
  port: 8086
  username: glx_benchmarker_user
  password: supersecret
  db_name: glx_benchmarker

# Configure all the Destinations that should be benchmarked
destinations:
  - name: LocalPulsar
    type: PulsarMQ
    amqp_url: "pyamqp://username:password@rabbitmq.example.com:5672//"
    # If used for ColdWarmBenchmark, we need to have ssh-access to the Pulsar-Server
    host: pulsar.example.com
    host_user: centos
    ssh_key: /local/path/to/ssh/key.cert
    tool_dependency_dir: /data/share/tools
    jobs_directory_dir: /data/share/staging
    persistence_dir: /data/share/persisted_data
  - name: RemotePulsar1
    type: PulsarMQ
    amqp_url: "pyamqp://username:password@rabbit.example2.com:5672//"
  - name: RemotePulsar1
    type: PulsarMQ
    amqp_url: "pyamqp://username:password@rabbit.example3.com:5672//"
  - name: CondorManager
    type: Condor
    host: condor-manager.uni.andreas-sk.de
    host_user: centos
    ssh_key: /local/path/to/ssh/key.cert
    jobs_directory_dir: /data/share/condor

workflows:
  - name: GalaxyWorkflow1
    type: Galaxy
    path: path/to/galaxy/workflow/file.ga
  - name: CondorWorkflow1
    type: Condor
    path: path/to/condor/workflow/folder
    job_file: job.job # needs to be in directory at "path"

benchmarks:
  - name: ColdvsWarm
    type: ColdvsWarm
    destinations:
      - LocalPulsar
    runs_per_workflow: 5
    workflows:
      - GalaxyWorkflow1
    # Pre task to clean up Pulsar, so the workflow-run is actually cold (i.e. run for the "first time")
    cold_pre_task:
      type: "ansible-playbook"
      playbook: "coldwarm_pretask.yml"
    warm_pre_task:
      type: "ansible-playbook"
      playbook: "cleanup-pulsar.yml"
    # If you want to clean up Pulsar after Benchmark ran
    post_task:
      type: "ansible-playbook"
      playbook: "cleanup_pulsar.yml"
  - name: DestinationComparison
    type: DestinationComparison
    pre_task:
      type: "ansible-playbook"
      playbook: "cleanup-pulsar.yml"
    post_task:
      - type: "shell-script"
      - script: "./benchmark2_post-task.sh" # Call some script after ending benchmark (like for cleaning up)
    destinations:
      - LocalPulsar
      - RemotePulsar1
      - RemotePulsar2
    runs_per_workflow: 5
    workflows:
      - GalaxyWorkflow1
  - name: PulsarBurstBenchmark
    type: Burst
    runs_per_workflow: 100
    burst_rate: 1 # How many workflows should be submitted per second
    destinations:
      - RemotePulsar1 # Only one destination allowed!
    workflows:
      - GalaxyWorkflow1
  - name: CondorBurstBenchmark
    type: Burst
    runs_per_workflow: 1000
    burst_rate: 20
    destinations:
      - CondorManager
    workflows:
      - CondorWorkflow1